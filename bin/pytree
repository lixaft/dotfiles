#!/usr/bin/env python3
"""Show python signature of the given files."""
from __future__ import annotations

import argparse
import ast
import sys
from typing import Optional
from typing import Sequence

INDENT = 4

BRANCH = "└"
CROSS = "├"
HORIZONTAL = "─"
VERTICAL = "│"


def colored(text, flags):
    return f"\033[{flags}m{text}\033[m"


class Visitor(ast.NodeVisitor):

    parents = []
    indents = []

    def _indent(self, node):
        self.parents.append(node)
        self.indents.append(VERTICAL + " " * (INDENT - 1))

    def _unindent(self):
        self.parents.pop()
        self.indents.pop()

    def visit_Module(self, node: ast.Module) -> None:
        self.parents.append(node)
        self.indents.append("")
        self.generic_visit(node)

    def visit_ClassDef(self, node: ast.ClassDef) -> None:
        self._print_def(node, "class ", color="33;1")
        self._indent(node)
        self.generic_visit(node)
        self._unindent()

    def visit_FunctionDef(self, node: ast.FunctionDef) -> None:
        self._print_def(node, "def ", color="35;1")
        self.generic_visit(node)

    def visit_Assign(self, node: ast.Assign) -> None:
        if node not in self.parents[-1].body:
            return
        self._print_assign(node)

    def _is_last(self, node: ast.AST) -> bool:
        for sibling in reversed(self.parents[-1].body):
            if isinstance(
                sibling, (ast.FunctionDef, ast.ClassDef, ast.Assign)
            ):
                return node == sibling
        return False

    def _print_def(self, node: ast.AST, prefix: str, color: str) -> None:
        text = [
            *self.indents,
            BRANCH if self._is_last(node) else CROSS,
            HORIZONTAL * (INDENT - 2),
            " ",
            colored(prefix, "31;1"),
            colored(node.name, color),
        ]
        print("".join(text))

    def _print_assign(self, node: ast.Assign):
        for target in node.targets:
            text = (
                *self.indents,
                BRANCH if self._is_last(node) else CROSS,
                HORIZONTAL * (INDENT - 2),
                " ",
                colored(target.id, "34"),
            )
            print("".join(text))


def main(argv: Optional[Sequence[str]] = None) -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument("filename")
    args = parser.parse_args(argv)

    with open(args.filename, "rb") as stream:
        contents = stream.read()

    print(colored(args.filename, "36;1"))
    tree = ast.parse(contents, filename=args.filename, type_comments=True)
    visitor = Visitor()
    visitor.visit(tree)

    return 0


if __name__ == "__main__":
    sys.exit(main())
