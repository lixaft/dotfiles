#!/usr/bin/env python3
from __future__ import annotations

import argparse
import os
import shutil
import subprocess
import sys
from typing import NamedTuple
from typing import Sequence


class File(NamedTuple):
    source: str
    destination: str


class Repository(NamedTuple):
    url: str
    path: str


def here(path: str) -> str:
    return os.path.abspath(os.path.join(os.path.dirname(__file__), path))


def home(path: str) -> str:
    return os.path.abspath(os.path.expanduser(os.path.join("~", path)))


FILES: list[File] = [
    File(here("src/.bashrc"), home(".bashrc")),
    File(here("src/.config/bat"), home(".config/bat")),
    File(here("src/.config/fish"), home(".config/fish")),
    File(here("src/.config/nvim"), home(".config/nvim")),
    File(here("src/.config/starship.toml"), home(".config/starship.toml")),
    File(here("src/.gitconfig"), home(".gitconfig")),
    File(here("src/.pdbrc"), home(".pdbrc")),
    File(here("src/.pythonrc"), home(".pythonrc")),
    File(here("src/.tmux.conf"), home(".tmux.conf")),
    File(here("src/.vim"), home(".vim")),
    File(here("src/.vimrc"), home(".vimrc")),
]


REPOSITORIES: list[Repository] = [
    Repository(
        "https://github.com/tmux-plugins/tpm",
        home(".tmux/plugins/tpm"),
    ),
    Repository(
        "https://github.com/wbthomason/packer.nvim",
        home(".local/share/nvim/site/pack/packer/start/packer.nvim"),
    ),
]


class StepError(Exception):
    pass


def _delete(path: str) -> None:
    if os.path.islink(path):
        os.unlink(path)
    elif os.path.isdir(path):
        shutil.rmtree(path)
    else:
        os.remove(path)


def symlink_file(file: File, force: bool = False) -> None:
    if os.path.exists(file.destination):
        if os.path.samefile(file.source, file.destination):
            return
        if not force:
            raise StepError("Destination exists")
        _delete(file.destination)

    directory = os.path.dirname(file.destination)
    if not os.path.exists(directory):
        os.makedirs(directory)
    os.symlink(
        file.source,
        file.destination,
        target_is_directory=os.path.isdir(file.source),
    )


def clone_repository(repository: Repository, force: bool = False) -> None:
    if os.path.exists(repository.path):
        if not force:
            raise StepError("Destination path exists")
        _delete(repository.path)

    try:
        subprocess.check_call(
            ("git", "clone", repository.url, repository.path),
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
    except subprocess.CalledProcessError:
        raise StepError("Fail to execute the clone command")


NORMAL = "\033[m"
BOLD = f"{NORMAL}\033[1m"
GRAY = f"{NORMAL}\033[2m"
RED = f"{NORMAL}\033[31;1m"
GREEN = f"{NORMAL}\033[32;1m"
BLUE = f"{NORMAL}\033[34;1m"


def _task(msg: str) -> None:
    print(f"{BLUE}~~> {GRAY}{msg}{NORMAL}", flush=True)


def _step(msg: str, error: bool = False) -> None:
    status, color = ("FAIL", RED) if error else ("OK", GREEN)
    print(f"[{color}{status}{NORMAL}] {msg}", flush=True)


def _summary(name: str, length: int, failed: Sequence[str]) -> None:
    print(
        f"[{name}]: "
        f"{GREEN}{length - len(failed)}{NORMAL} success, "
        f"{RED}{len(failed)}{NORMAL} failures",
        flush=True,
    )
    for each in failed:
        print(f"\t{GRAY}{each}{NORMAL}", flush=True)


def main(argv: Sequence[str] | None = None) -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument("--force", "-f", action="store_true")
    args = parser.parse_args(argv)

    failed_files: list[str] = []
    failed_repositories: list[str] = []

    _task("Symlink files...")
    for file in FILES:
        try:
            name = os.path.relpath(file.source, start=here("src"))
            symlink_file(file, force=args.force)
            _step(name)
        except StepError:
            failed_files.append(name)
            _step(name, error=True)
    print(flush=True)

    _task("Clone repositories...")
    for repository in REPOSITORIES:
        try:
            clone_repository(repository, force=args.force)
            _step(repository.url)
        except StepError:
            failed_repositories.append(repository.url)
            _step(repository.url, error=True)
    print(flush=True)

    line = " Summary ".center(shutil.get_terminal_size().columns, "â”€")
    color = RED if failed_files or failed_repositories else GREEN
    print(f"{color}{line}{NORMAL}", flush=True)
    _summary("Symlink", len(FILES), failed_files)
    _summary("Clone", len(REPOSITORIES), failed_repositories)

    return 0


if __name__ == "__main__":
    sys.exit(main())
