#!/usr/bin/env python3
"""Dotfiles installer."""
import argparse
import os
import shutil
import subprocess
import sys
from typing import List, NamedTuple, Optional, Sequence


class File(NamedTuple):
    """File representation."""

    source: str
    target: str


class Repository(NamedTuple):
    """Repository representation."""

    remote: str
    local: str


def _clean(path: str) -> str:
    return os.path.abspath(os.path.normpath(path))


def here(path: str) -> str:
    return _clean(os.path.join(os.path.dirname(__file__), path))


def home(path: str) -> str:
    return _clean(os.path.expanduser(os.path.join("~", path)))


def shell(args: Sequence[str]) -> str:
    process = subprocess.Popen(
        args,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )
    stdout, stderr = process.communicate()
    if process.returncode > 0:
        raise RuntimeError(stderr.strip())
    return stdout.strip()


FILES: List[File] = [
    File(here("bash/bash_profile"), home(".bash_profile")),
    File(here("bash/bashrc"), home(".bashrc")),
    File(here("bin/hl"), home("bin/hl")),
    File(here("bin/pytree"), home("bin/pytree")),
    File(here("fish"), home(".config/fish")),
    File(here("git/gitconfig"), home(".gitconfig")),
    File(here("python/pdbrc"), home(".pdbrc")),
    File(here("python/pythonrc"), home(".pythonrc")),
    File(here("starship/starship.toml"), home(".config/starship.toml")),
    File(here("tmux/tmux.conf"), home(".tmux.conf")),
    File(here("vim/vim"), home(".vim")),
    File(here("vim/vimrc"), home(".vimrc")),
    File(here("nvim"), home(".config/nvim")),
]


REPOSITORIES: List[Repository] = [
    Repository(
        "https://github.com/tmux-plugins/tpm",
        home(".tmux/plugins/tpm"),
    ),
    Repository(
        "https://github.com/wbthomason/packer.nvim",
        home(".local/share/nvim/site/pack/packer/start/packer.nvim"),
    ),
]


def install_file(file: File, symlink=False):
    """Install the specified file."""
    directory = os.path.dirname(file.target)
    if not os.path.exists(directory):
        os.makedirs(directory)

    shell(["rm", "-rf", file.target])
    if symlink:
        shell(["ln", "-sf", file.source, file.target])
    else:
        shell(["cp", "-rf", file.source, file.target])


def clone_repository(repository: Repository):
    """Install the specified directory."""
    if os.path.exists(repository.local):
        shell(["rm", "-rf", repository.local])
    shell(["git", "clone", repository.remote, repository.local])


def main(argv: Optional[Sequence[str]] = None) -> int:
    """Entry point of the command line interface."""
    parser = argparse.ArgumentParser()
    parser.add_argument("--copy", "-c", action="store_true")
    args = parser.parse_args(argv)

    # Install files.
    for file in FILES:
        install_file(file, symlink=not args.copy)
        print(f"{file.source} \033[33;1m->\033[m {file.target}")
    print()

    # Clone repositories.
    for repository in REPOSITORIES:
        clone_repository(repository)
        print(f"{repository.remote} \033[33;1m->\033[m {repository.local}")
    print()

    line = " SUCCESS ".center(os.get_terminal_size().columns, "=")
    print(f"\033[32;1m{line}\033[m")
    print(f"{len(FILES)} files have been successfully copied.")
    print(f"{len(REPOSITORIES)} repositories have been successfully cloned.")
    return 0


if __name__ == "__main__":
    sys.exit(main())
